plugins {
	id 'java'
	id 'org.springframework.boot' version "$bootVer"
	id 'io.spring.dependency-management' version "$depMgtVer"
	id 'com.netflix.dgs.codegen' version "$dgsCodegenVer"
	id 'org.hibernate.orm' version "$hibernateOrmVer"
	id 'org.graalvm.buildtools.native' version "$buildToolNativeVer"
	id 'org.asciidoctor.jvm.convert' version "$jvmConvertVer"
}

group = sysGroup
version = sysVersion

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/milestone' }
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', springCloudVersion)
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	// implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	// implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	implementation 'org.springframework.integration:spring-integration-http'
	implementation 'org.springframework.integration:spring-integration-kafka'
	implementation 'org.springframework.integration:spring-integration-redis'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.security:spring-security-messaging'
	implementation 'org.springframework.session:spring-session-data-redis'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.integration:spring-integration-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
	packageName = 'com.dongpv.sns.gateway.codegen'
	generateClient = true
}

hibernate {
	enhancement {
		enableAssociationManagement = true
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
